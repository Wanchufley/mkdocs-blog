{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 Home","text":""},{"location":"#tags","title":"Tags","text":""},{"location":"#latest-posts","title":"\ud83d\udcda Latest Posts","text":"\ud83d\udd27 ufw-role <p>Ansible role for setting up UFW, SSH key access, and automation security best practices.</p>  \ud83d\udcbe Dotfiles Setup <p>How I bootstrap a fresh machine with my dotfiles and Git configuration.</p>  \ud83e\udd16 Figurine Setup <p>Add fun ASCII banners to your terminal using <code>figurine</code>.</p>"},{"location":"#homelab","title":"Homelab","text":"<p>Self-documentation repo for my own sake along the journey of setting up a nice homelab.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>First of all, I have to say that I am not an expert in networking, containers, storage, Linux... so please be aware that everything you see here does not originate from me. It comes from many sources, including YouTube videos, forums, knowledgeable friends, and a general willingness to get things working.</p> <p>This repo serves as a way for me to document the setup of my new homelab after having a functional setup for a couple of months, albeit not the most reliable. This includes how the services I use are configured and operated.</p>"},{"location":"#current-setup","title":"Current Setup","text":"<ul> <li>Hardware: A 3 node Proxmox Cluster, consisting on 2 minipc's, 1 of them only runs as quorum device, and the other one has my main and more lightwight services, both in Docker and LXC containers, and lastly, and HP Z620 Workstation in which I am hosting an instance of TrueNAS Scale along with another docker instance where I am passing through the GPU. </li> <li>Storage: 2TB mirror VDEV (hoping to upgrade very soon, but easy enough just by adding mirrors, since losing half of the capacity doesn't bother me too much).</li> </ul>"},{"location":"#planned-services","title":"Planned Services","text":"<p>Here\u2019s a list of services I plan to run:</p> <ul> <li>Media Management:</li> <li>Arr Stack (Sonarr, Radarr, etc.) via Gluetun VPN with PIA.</li> <li> <p>Jellyfin and Jellyseer for media consumption.</p> </li> <li> <p>Utilities:</p> </li> <li>Pi-hole for network-wide ad-blocking and DNS management.</li> <li>Portainer to simplify container management.</li> <li>Photo backup software, such as Nextcloud.</li> <li>A dashboard like Homepage for centralized management.</li> </ul> <p></p>"},{"location":"#key-considerations","title":"Key Considerations","text":"<ol> <li> <p>Local Access Only:    All services will be accessible only inside my house theoritetically, I have a Tailnet and many connectors in various machines (virtual or physical) so I don't need    to open any ports to the public internet.</p> </li> <li> <p>Local SSL certificates:    I have an instance of NPM that I use along with pihole to be able to add the custom DNS records to the proxys served by NPM</p> </li> <li> <p>Storage Integration:    I know that having a virtualized TrueNAS is not recommended, but since the machine where I am hosting has so many resources I didn't  want to limit the capabilities of the machine    in the sense of upgradability, so instead of having to virtualized something inside TrueNAS, I rather have the virtualized nas and also be able to host couple of things more.  </p> </li> </ol>"},{"location":"#conclusion","title":"Conclusion","text":"<p>This repo is a work in progress as I rebuild my homelab. It\u2019s a learning process, and I hope documenting it helps me (and potentially others) along the way.</p>"},{"location":"about/","title":"\ud83d\udc4b About Me","text":"<p>\u201cA little corner of the internet where I document my tinkering, learning, and tech experiments.\u201d</p> <p>\ud83e\udde0 Who I am Just a random guy from Tenerife, currently based in Amsterdam, who likes tech and tinkering as much as the next guy.</p> <p>\ud83d\udca1 Why I built this blog I built this site primarily for myself, in an effort to keep as much documentation as I can of everything that I do to my personal computers and my homelab. I am not a super expert, but the willingness to get things done has got me far enough, so please feel invited to spot any mistakes I make or to give me any advise.</p> <p>\ud83d\udd27 Tech I enjoy </p> <ul> <li>\ud83d\udc27 Linux (obviously!)</li> <li>\u2699\ufe0f Ansible</li> <li>\ud83d\udce6 Docker</li> <li>\ud83e\uddea Proxmox</li> <li>\ud83e\udde0 Learning by breaking stuff</li> <li>   Counter Strike</li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tag:configuration","title":"configuration","text":"<ul> <li>            Simple way to manage all of your dotfiles \ud83d\uddc3          </li> </ul>"},{"location":"tags/#tag:customization","title":"customization","text":"<ul> <li>            Figurine, display your hostname in style \ud83d\ude0e          </li> </ul>"},{"location":"tags/#tag:linux","title":"linux","text":"<ul> <li>            Download, install and configure UFW rules using Ansible \ud83c\udd70          </li> <li>            Figurine, display your hostname in style \ud83d\ude0e          </li> <li>            Simple way to manage all of your dotfiles \ud83d\uddc3          </li> </ul>"},{"location":"tags/#tag:network","title":"network","text":"<ul> <li>            Download, install and configure UFW rules using Ansible \ud83c\udd70          </li> </ul>"},{"location":"tags/#tag:security","title":"security","text":"<ul> <li>            Download, install and configure UFW rules using Ansible \ud83c\udd70          </li> </ul>"},{"location":"tags/#tag:shell","title":"shell","text":"<ul> <li>            Figurine, display your hostname in style \ud83d\ude0e          </li> <li>            Simple way to manage all of your dotfiles \ud83d\uddc3          </li> </ul>"},{"location":"posts/post-01-figurine-install/","title":"Figurine, display your hostname in style","text":"<p>Learn how to display a colorful and 3d looking custom text on your shell start screen.</p> <p></p>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#installing-and-configuring-figurine","title":"Installing and Configuring Figurine","text":"","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-download-and-install-figurine","title":"Step  : Download and Install Figurine","text":"Download binary and move to /usr/local/bin<pre><code>wget https://github.com/arsham/figurine/releases/download/v1.3.0/figurine_linux_amd64_v1.3.0.tar.gz -O deploy.tar.gz\ntar -xvf deploy.tar.gz\nsudo mv deploy/figurine /usr/local/bin\n</code></pre>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-test-figurine-installation","title":"Step  : Test Figurine Installation","text":"Run this command to preview<pre><code>figurine -f \"3d.flf\" `hostname`\n</code></pre>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-create-the-profile-script","title":"Step  : Create the Profile Script","text":"Create file<pre><code>sudo nano /etc/profile.d/figurine.sh\n</code></pre> <p>Add the following lines to the file:</p> Change hostname to whatever text you prefer<pre><code>echo \"\"\nfigurine -f \"3d.flf\" `hostname`\necho \"\"\n</code></pre>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-test-the-script","title":"Step  : Test the Script","text":"Check if its working<pre><code>sh /etc/profile.d/figurine.sh\n</code></pre>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-exit-and-log-back-in","title":"Step  : Exit and log back in","text":"<p>Once the file is created, exit your session and login locally or through SSH back in to test it.</p>","tags":["customization","shell","linux"]},{"location":"posts/post-01-figurine-install/#step-clean-up","title":"Step  : Clean Up","text":"Remove leftover files<pre><code>rm -rf deploy*\n</code></pre>","tags":["customization","shell","linux"]},{"location":"posts/post-02-ufw-role/","title":"Download, install and configure UFW rules using Ansible","text":"<p>Quick role to configure UFW in your machines to allow local IP's and Tailscale traffic in.</p> <p></p> <p>Source Code</p> <p>You cand find the source code to follow this guide on my Github</p>","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#ufw-configuration-role-for-ansible","title":"UFW Configuration Role for Ansible","text":"","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#this-ansible-role-configures-ufw-with-basic-security-rules","title":"This Ansible role configures UFW with basic security rules \u00a0 :","text":"defaults/main.yaml<pre><code>---\nssh_port: 22\nallow_ssh: true\nlocal_subnet: \"192.168.178.0/24\"\n</code></pre> <ul> <li>Allows SSH if <code>allow_ssh: true</code></li> <li>Allows all outgoing traffic</li> <li>Blocks all incoming traffic by default</li> <li>Allows internal LAN access (<code>local_subnet</code>)</li> <li>Allows all Tailscale traffic (<code>100.64.0.0/10</code>)</li> <li>Enables UFW</li> </ul>","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#variables","title":"Variables \u00a0 :","text":"<p>Customize in <code>vars/main.yml</code>:</p> vars/main.yaml<pre><code>---\nssh_port: 22\nallow_ssh: true  # Set to false if SSH is not needed\nlocal_subnet: \"192.168.1.0/24\"  # Adjust to match your home network\n</code></pre> <ul> <li><code>ssh_port</code>: SSH port (default: 22)</li> <li><code>allow_ssh</code>: Whether to allow SSH (default: true)</li> <li><code>local_subnet</code>: Your LAN subnet (default: \"192.168.1.0/24\")</li> </ul>","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#create-the-playbook","title":"Create the playbook","text":"<p>Write a simple playbook that calls the role:</p> ufw-setup.yaml<pre><code>- hosts: all\n  become: true\n  roles:\n    - ufw-config\n</code></pre>","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#run-the-playbook","title":"Run the playbook","text":"run:<pre><code>ansible-playbook -i inventory ufw-setup.yaml\n</code></pre>","tags":["network","security","linux"]},{"location":"posts/post-02-ufw-role/#ufw-will-now-be-properly-configured-across-all-your-vms-lxcs-and-containers","title":"UFW will now be properly configured across all your VMs, LXCs, and containers!","text":"","tags":["network","security","linux"]},{"location":"posts/post-03-dotfile-mgmnt/","title":"Simple way to manage all of your dotfiles","text":"<p>You can learn how I manage my dotfiles in the simplest way that I know.</p> <p></p>","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#step-by-step-setup-your-dotfiles-including-git-on-a-new-machine","title":"\u2705 Step-by-Step: Setup Your Dotfiles (Including Git) on a New Machine","text":"","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#install-git","title":"Install Git","text":"Install as per your package manager<pre><code>sudo apt install git  # Debian/Ubuntu\n# or\nsudo pacman -S git    # Arch\n</code></pre>","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#clone-your-dotfiles-repo","title":"Clone Your Dotfiles Repo","text":"<p>Example using SSH or HTTPS:</p> Choose your preference<pre><code># Option 1: HTTPS\ngit clone https://gitea.xrx-tech.org/wanchufley/homelab ~/repositories/homelab\n\n# Option 2: SSH (preferred if you\u2019ve set up SSH keys)\ngit clone git@gitea.xrx-tech.org:wanchufley/homelab.git ~/repositories/homelab\n</code></pre>","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#run-the-bootstrap-script","title":"Run the Bootstrap Script","text":"Change directory and run it like this:<pre><code>cd ~/repositories/homelab\nchmod +x bootstrap.sh\n./bootstrap.sh\n</code></pre> <p>This will:</p> <ul> <li>Back up existing configs (<code>.bashrc.bak</code>, etc.)</li> <li>Symlink your dotfiles into place</li> </ul> <p>if you cant run it:</p> <p>Chech if the file is executable by running ls -l, and if it isnt't run: chmod +x nameofthefile</p>","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#set-up-git-credential-storage-optional-but-handy","title":"Set Up Git Credential Storage (Optional but Handy)","text":"<p>If you use HTTPS and want Git to remember your credentials:</p> Set the type of credential helper you want, in this case, store<pre><code>git config --global credential.helper store\n</code></pre> <p>After this, Git will prompt you once for credentials, then store them in plain text at:</p> <pre><code>~/.git-credentials\n</code></pre> <p>Since your <code>.gitconfig</code> is symlinked already, it will also use your name and email from there.</p> <p>Check for the file</p> <p>If after your first push you go to your home directory and you don't see the file, just manually create it yourself adding the credentials in the following way: https://username:token@github.com</p>","tags":["configuration","shell","linux"]},{"location":"posts/post-03-dotfile-mgmnt/#verify-git-config","title":"Verify Git Config \u00a0\u2705","text":"run the following command:<pre><code>git config --list --show-origin\n</code></pre> <p>This will show you:</p> <ul> <li>Where each config is coming from</li> <li>That your symlinked <code>~/.gitconfig</code> is being used</li> </ul>","tags":["configuration","shell","linux"]}]}